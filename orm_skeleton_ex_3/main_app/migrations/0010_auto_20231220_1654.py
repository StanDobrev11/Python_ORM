# Generated by Django 4.2.4 on 2023-12-20 16:54

from django.db import migrations


def find_age_group(age):
    if age <= 12:
        return 'Child'
    elif age <= 17:
        return 'Teen'
    else:
        return 'Adult'


def age_field_population(apps, schema_editor):
    """
    Create a new function that migrates information for the age group of every person based on their age.
    If the age is less than or equal to 12 - the group is "Child".
    If the age is between 13 and 17 - the group is "Teen".
    If the age is greater than or equal to 18 - the group is "Adult".
    """

    person_model = apps.get_model('main_app', 'Person')
    all_persons = person_model.objects.all()

    for person in all_persons:
        person.age_group = find_age_group(person.age)

    # in order to save only once for optimization
    person_model.objects.bulk_update(all_persons, ['age_group'])

    print('Age group populated')


def reverse_age_field_populations(apps, schema_editor):
    person_model = apps.get_model('main_app', 'Person')
    all_persons = person_model.objects.all()

    # to get default value of a column of a model
    age_group_default = person_model._meta.get_field('age_group').default

    for person in all_persons:
        person.age_group = age_group_default

    person_model.objects.bulk_update(all_persons, ['age_group'])

    print('Age group reversed to default value')


class Migration(migrations.Migration):
    dependencies = [
        ('main_app', '0009_person'),
    ]

    operations = [
        migrations.RunPython(age_field_population, reverse_code=reverse_age_field_populations)
    ]
