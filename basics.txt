py manage.py runserver then connect using 127.0.0.1:8000 as default port
ctr + pause/break to quit

-------- USED TO MAKE shell USER FRIENDLY
pip install ipdb
pip install ipython
---RUN
python manage.py shell

py manage.py dbshell - starting sql


pip install pycopg2 - driver for postgresql databases

pip freeze > requirements.txt

py manage.py createsuperuser

py manage.py sqlmigrations main_app 0003 -> view the migration as SQL code

py manage.py makemigrations main_app --empty -> will create empty file migration

py manage.py showmigrations

py manage.py migrate main_app 0003 -> reverse database to state of migrated 0003 migration
py manage.py migrate main_app zero -> reverse to zero, clean start

creating manager --> ex_4 check models CUSTOM MANAGER, no to take data using .object
Normally is done using new file "managers"
then try in caller.py -> print(MyModel.custom_manager.custom_query_filter())

----- logger. placed in the settings of the project ------
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler'}
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG', # other levels: CRITICAL, ERROR, WARNING, INFO, DEBUG
    },
    'loggers': {
        'django.db.backends': { # responsible for the SQL logs
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        }
    }
}

# Custom manager -> usually separate file
# class CustomManager(models.Manager):
#     def custom_query_filter(self):
#         return "Very complex logic here"


# Class using custom manager
# class MyModel(models.Model):
#     field1 = models.CharField()
#
#     custom_manager = CustomManager()